import * as React from 'react';
import { ClipboardDocumentCheckIcon, ClipboardDocumentIcon } from './icons';

const unifiedScript = `
-- =================================================================
-- السكربت الشامل والنهائي (الإصدار 27.0)
-- =================================================================
-- هذا السكربت يقوم بإعداد قاعدة البيانات بالكامل وإنشاء حساب مدير تلقائياً.
-- انسخ هذا السكربت بالكامل وشغّله مرة واحدة فقط في Supabase SQL Editor.
-- !! هام: عدّل رقم هاتف وكلمة مرور المدير في نهاية السكربت قبل التشغيل !!

-- 1. CLEANUP: Drop all existing objects in reverse order of dependency.
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT 'DROP POLICY IF EXISTS "' || policyname || '" ON public.' || tablename || ';' as statement FROM pg_policies WHERE schemaname = 'public') LOOP
        EXECUTE r.statement;
    END LOOP;
END$$;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.is_admin() CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.delete_user_account() CASCADE;
DROP FUNCTION IF EXISTS public.delete_user(user_id_to_delete uuid) CASCADE;
DROP TABLE IF EXISTS public.site_finances CASCADE;
DROP TABLE IF EXISTS public.invoice_items CASCADE;
DROP TABLE IF EXISTS public.invoices CASCADE;
DROP TABLE IF EXISTS public.sessions CASCADE;
DROP TABLE IF EXISTS public.stages CASCADE;
DROP TABLE IF EXISTS public.cases CASCADE;
DROP TABLE IF EXISTS public.clients CASCADE;
DROP TABLE IF EXISTS public.admin_tasks CASCADE;
DROP TABLE IF EXISTS public.appointments CASCADE;
DROP TABLE IF EXISTS public.accounting_entries CASCADE;
DROP TABLE IF EXISTS public.assistants CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;

-- 2. HELPER & RPC FUNCTIONS
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS boolean AS $$
DECLARE
    user_role TEXT;
BEGIN
    -- This function runs with the privileges of the user who defines it (postgres via SECURITY DEFINER),
    -- allowing it to bypass RLS on the profiles table to check the user's role.
    SELECT role INTO user_role FROM public.profiles WHERE id = auth.uid();
    RETURN COALESCE(user_role, 'user') = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

CREATE OR REPLACE FUNCTION public.delete_user_account()
RETURNS void AS $$
BEGIN
  -- This will cascade delete the user's profile and all related data in public tables.
  DELETE FROM auth.users WHERE id = auth.uid();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
GRANT EXECUTE ON FUNCTION public.delete_user_account() TO authenticated;

CREATE OR REPLACE FUNCTION public.delete_user(user_id_to_delete uuid)
RETURNS void AS $$
BEGIN
    IF NOT public.is_admin() THEN
        RAISE EXCEPTION 'Only admins can delete users.';
    END IF;
    IF auth.uid() = user_id_to_delete THEN
        RAISE EXCEPTION 'Admins cannot delete their own account from the admin panel.';
    END IF;
    DELETE FROM auth.users WHERE id = user_id_to_delete;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;
GRANT EXECUTE ON FUNCTION public.delete_user(user_id_to_delete uuid) TO authenticated;


-- 3. TABLES CREATION
-- The UNIQUE constraint on mobile_number has been removed to prevent signup errors.
-- The uniqueness is already enforced on the auth.users email (which is derived from the phone number).
CREATE TABLE public.profiles (id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE, full_name text, mobile_number text, is_approved boolean DEFAULT false, is_active boolean DEFAULT true, subscription_start_date date, subscription_end_date date, role text DEFAULT 'user', created_at timestamptz DEFAULT now());
CREATE TABLE public.assistants (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, name text NOT NULL, UNIQUE(user_id, name));
CREATE TABLE public.clients (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, name text NOT NULL, contact_info text);
CREATE TABLE public.cases (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, client_id text NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE, subject text NOT NULL, client_name text, opponent_name text, fee_agreement text, status text DEFAULT 'active');
CREATE TABLE public.stages (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, case_id text NOT NULL REFERENCES public.cases(id) ON DELETE CASCADE, court text NOT NULL, case_number text, first_session_date timestamptz, decision_date timestamptz, decision_number text, decision_summary text, decision_notes text);
CREATE TABLE public.sessions (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, stage_id text NOT NULL REFERENCES public.stages(id) ON DELETE CASCADE, court text, case_number text, date timestamptz NOT NULL, client_name text, opponent_name text, postponement_reason text, next_postponement_reason text, is_postponed boolean DEFAULT false, next_session_date timestamptz, assignee text);
CREATE TABLE public.admin_tasks (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, task text NOT NULL, due_date timestamptz NOT NULL, completed boolean DEFAULT false, importance text DEFAULT 'normal', assignee text, location text);
CREATE TABLE public.appointments (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, title text NOT NULL, "time" text, date timestamptz NOT NULL, importance text, notified boolean, reminder_time_in_minutes integer, assignee text);
CREATE TABLE public.accounting_entries (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, type text NOT NULL, amount real NOT NULL, date timestamptz NOT NULL, description text, client_id text, case_id text, client_name text);
CREATE TABLE public.invoices (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, client_id text NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE, client_name text, case_id text REFERENCES public.cases(id) ON DELETE SET NULL, case_subject text, issue_date timestamptz NOT NULL, due_date timestamptz NOT NULL, tax_rate real DEFAULT 0, discount real DEFAULT 0, status text DEFAULT 'draft', notes text);
CREATE TABLE public.invoice_items (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, invoice_id text NOT NULL REFERENCES public.invoices(id) ON DELETE CASCADE, description text NOT NULL, amount real NOT NULL);
CREATE TABLE public.site_finances (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL, type text DEFAULT 'income' NOT NULL, payment_date date NOT NULL, amount real NOT NULL, description text, payment_method text);


-- 4. AUTOMATION: Trigger function for new user signup.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  -- This function robustly creates/updates a user's profile upon signup.
  -- It derives the local phone number (e.g., 09...) from the fake email (e.g., sy+9639...@email.com)
  -- by stripping the prefixes and suffix, making it independent of client-side metadata.
  INSERT INTO public.profiles (id, full_name, mobile_number, created_at)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    '0' || regexp_replace(new.email, '^sy\\+963|@email\\.com$', '', 'g'),
    new.created_at
  )
  ON CONFLICT (id) DO UPDATE SET
    full_name = EXCLUDED.full_name,
    mobile_number = EXCLUDED.mobile_number,
    created_at = EXCLUDED.created_at;
  
  -- Force-confirm the user's email to bypass email verification, as activation is manual.
  UPDATE auth.users SET email_confirmed_at = NOW() WHERE id = new.id;

  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 5. SECURITY: RLS POLICIES
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assistants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admin_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accounting_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.site_finances ENABLE ROW LEVEL SECURITY;

-- RLS Policies for the 'profiles' table.
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
CREATE POLICY "Admins have full access to all profiles." ON public.profiles FOR ALL USING (public.is_admin());

-- RLS Policies for the 'site_finances' table (Admin only).
CREATE POLICY "Enable ALL for admin" ON public.site_finances FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- RLS policies for all other user-specific tables.
DO $$
DECLARE
    table_name TEXT;
BEGIN
    FOREACH table_name IN ARRAY ARRAY[
        'assistants', 'clients', 'cases', 'stages', 'sessions', 
        'admin_tasks', 'appointments', 'accounting_entries', 
        'invoices', 'invoice_items'
    ]
    LOOP
        EXECUTE format('CREATE POLICY "Enable ALL for own data" ON public.%I FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);', table_name);
        EXECUTE format('CREATE POLICY "Enable ALL for admin" ON public.%I FOR ALL USING (is_admin()) WITH CHECK (is_admin());', table_name);
    END LOOP;
END$$;


-- 6. PERMISSIONS
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;

-- =================================================================
-- 7. إنشاء حساب المدير تلقائياً وتصحيحه
-- =================================================================
-- !! هام: عدّل البيانات التالية قبل تشغيل السكربت !!
DO $$
DECLARE
    admin_phone_local TEXT := '0987654321'; -- <-- غيّر رقم هاتف المدير هنا
    admin_phone_e164 TEXT := '+963' || RIGHT(admin_phone_local, 9);
    admin_email TEXT := 'sy' || admin_phone_e164 || '@email.com'; -- بريد وهمي بالصيغة الجديدة
    admin_password TEXT := 'changeme123'; -- <-- غيّر كلمة المرور هنا إلى كلمة مرور قوية
    admin_full_name TEXT := 'المدير العام';
    admin_user_id uuid;
BEGIN
    -- Check if the admin user's email exists in auth.users.
    SELECT id INTO admin_user_id FROM auth.users WHERE email = admin_email;

    -- If the user does not exist, create them in auth.users.
    IF admin_user_id IS NULL THEN
        INSERT INTO auth.users(id, email, encrypted_password, raw_user_meta_data, email_confirmed_at, aud, role)
        VALUES (
            gen_random_uuid(), -- Explicitly generate a UUID to avoid NOT NULL violation.
            admin_email,
            crypt(admin_password, gen_salt('bf')),
            jsonb_build_object('full_name', admin_full_name, 'mobile_number', admin_phone_local),
            now(),
            'authenticated',
            'authenticated'
        ) RETURNING id INTO admin_user_id;
    END IF;

    -- Upsert the profile for the admin user. This is robust:
    -- It creates the profile if the trigger failed or didn't run.
    -- It updates the profile to admin if it already exists.
    INSERT INTO public.profiles (id, full_name, mobile_number, role, is_approved, is_active, subscription_start_date, subscription_end_date)
    VALUES (
        admin_user_id,
        admin_full_name,
        admin_phone_local, -- Store the local phone number format
        'admin',
        true,
        true,
        '2024-01-01',
        '2999-12-31'
    )
    ON CONFLICT (id) DO UPDATE SET
        role = EXCLUDED.role,
        is_approved = EXCLUDED.is_approved,
        is_active = EXCLUDED.is_active,
        subscription_start_date = EXCLUDED.subscription_start_date,
        subscription_end_date = EXCLUDED.subscription_end_date,
        full_name = EXCLUDED.full_name,
        mobile_number = EXCLUDED.mobile_number;
END $$;
`;

const SetupWizard: React.FC<{ onRetry: () => void }> = ({ onRetry }) => {
    const [copied, setCopied] = React.useState(false);

    const handleCopy = () => {
        navigator.clipboard.writeText(unifiedScript.trim()).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4" dir="rtl">
            <div className="w-full max-w-4xl p-8 space-y-6 bg-white rounded-lg shadow-md">
                <div className="text-center">
                    <h1 className="text-3xl font-bold text-gray-800">إعداد قاعدة البيانات لأول مرة</h1>
                    <p className="mt-2 text-gray-600">يبدو أن قاعدة البيانات غير مهيأة. يرجى اتباع الخطوات التالية لإعداد التطبيق.</p>
                </div>

                <div className="space-y-4">
                    <h2 className="text-xl font-semibold">الخطوة 1: نسخ السكربت الشامل والنهائي</h2>
                    <p className="text-sm text-gray-600">
                        السكربت التالي سيقوم بإعداد قاعدة البيانات بالكامل وإنشاء حساب مدير تلقائي.
                        <strong className="text-red-600"> هام: </strong> يجب تعديل رقم هاتف وكلمة مرور المدير داخل السكربت قبل تشغيله.
                    </p>
                    <div className="relative bg-gray-800 text-white p-4 rounded-md max-h-[50vh] overflow-y-auto">
                        <pre className="text-sm whitespace-pre-wrap">
                            <code>{unifiedScript.trim()}</code>
                        </pre>
                        <button 
                            onClick={handleCopy}
                            className="sticky bottom-2 right-2 flex items-center gap-2 px-3 py-1 bg-gray-600 text-white text-xs rounded-md hover:bg-gray-500"
                        >
                            {copied ? <ClipboardDocumentCheckIcon className="w-4 h-4 text-green-400"/> : <ClipboardDocumentIcon className="w-4 h-4"/>}
                            {copied ? 'تم النسخ' : 'نسخ السكربت'}
                        </button>
                    </div>
                </div>

                <div className="space-y-4 border-t pt-6">
                    <h2 className="text-xl font-semibold">الخطوة 2: تشغيل السكربت في Supabase</h2>
                     <ol className="list-decimal list-inside space-y-2 text-gray-700">
                        <li>اذهب إلى لوحة تحكم مشروعك في <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">Supabase</a>.</li>
                        <li>من القائمة الجانبية، اختر <strong className="font-semibold">SQL Editor</strong>.</li>
                        <li>اضغط على <strong className="font-semibold">+ New query</strong>.</li>
                        <li>الصق السكربت الذي نسخته في محرر الأكواد.</li>
                        <li>
                            <strong className="text-red-600">تأكد من تعديل رقم هاتف وكلمة مرور المدير</strong> في نهاية السكربت (القسم 7).
                        </li>
                        <li>اضغط على زر <strong className="font-semibold text-green-600">RUN</strong> لتنفيذ السكربت.</li>
                    </ol>
                </div>

                <div className="text-center border-t pt-6">
                    <p className="text-gray-600 mb-4">بعد التأكد من نجاح تنفيذ السكربت، اضغط على الزر أدناه لإعادة محاولة الاتصال.</p>
                    <button 
                        onClick={onRetry}
                        className="px-8 py-3 text-white bg-blue-600 rounded-lg hover:bg-blue-700 font-semibold"
                    >
                        إعادة المحاولة
                    </button>
                </div>
            </div>
        </div>
    );
};

export default SetupWizard;