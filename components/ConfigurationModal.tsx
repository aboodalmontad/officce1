import * as React from 'react';
import { ClipboardDocumentCheckIcon, ClipboardDocumentIcon, ExclamationTriangleIcon } from './icons';

const unifiedScript = `
-- =================================================================
-- السكربت الشامل والنهائي (الإصدار 29.0)
-- =================================================================
-- هذا السكربت يقوم بإعداد قاعدة البيانات بالكامل، تفعيل المزامنة الفورية، وإنشاء حساب مدير تلقائياً.
-- انسخ هذا السكربت بالكامل وشغّله مرة واحدة فقط في Supabase SQL Editor.
-- !! هام: عدّل رقم هاتف وكلمة مرور المدير في نهاية السكربت قبل التشغيل !!

-- 1. CLEANUP: Drop all existing objects in reverse order of dependency.
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT 'DROP POLICY IF EXISTS "' || policyname || '" ON public.' || tablename || ';' as statement FROM pg_policies WHERE schemaname = 'public') LOOP
        EXECUTE r.statement;
    END LOOP;
END$$;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.is_admin() CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS public.delete_user_account() CASCADE;
DROP FUNCTION IF EXISTS public.delete_user(user_id_to_delete uuid) CASCADE;
DROP FUNCTION IF EXISTS public.update_updated_at_column() CASCADE;
DROP TABLE IF EXISTS public.site_finances CASCADE;
DROP TABLE IF EXISTS public.invoice_items CASCADE;
DROP TABLE IF EXISTS public.invoices CASCADE;
DROP TABLE IF EXISTS public.sessions CASCADE;
DROP TABLE IF EXISTS public.stages CASCADE;
DROP TABLE IF EXISTS public.cases CASCADE;
DROP TABLE IF EXISTS public.clients CASCADE;
DROP TABLE IF EXISTS public.admin_tasks CASCADE;
DROP TABLE IF EXISTS public.appointments CASCADE;
DROP TABLE IF EXISTS public.accounting_entries CASCADE;
DROP TABLE IF EXISTS public.assistants CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;

-- 2. HELPER & RPC FUNCTIONS
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS boolean AS $$
DECLARE
    user_role TEXT;
BEGIN
    -- This function runs with the privileges of the user who defines it (postgres via SECURITY DEFINER),
    -- allowing it to bypass RLS on the profiles table to check the user's role.
    -- The search_path must include 'auth' to resolve auth.uid().
    SELECT role INTO user_role FROM public.profiles WHERE id = auth.uid();
    RETURN COALESCE(user_role, 'user') = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, auth;

CREATE OR REPLACE FUNCTION public.delete_user_account()
RETURNS void AS $$
BEGIN
  -- This will cascade delete the user's profile and all related data in public tables.
  DELETE FROM auth.users WHERE id = auth.uid();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, auth;
GRANT EXECUTE ON FUNCTION public.delete_user_account() TO authenticated;

CREATE OR REPLACE FUNCTION public.delete_user(user_id_to_delete uuid)
RETURNS void AS $$
BEGIN
    IF NOT public.is_admin() THEN
        RAISE EXCEPTION 'Only admins can delete users.';
    END IF;
    IF auth.uid() = user_id_to_delete THEN
        RAISE EXCEPTION 'Admins cannot delete their own account from the admin panel.';
    END IF;
    DELETE FROM auth.users WHERE id = user_id_to_delete;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, auth;
GRANT EXECUTE ON FUNCTION public.delete_user(user_id_to_delete uuid) TO authenticated;


-- 3. TABLES CREATION
-- Added 'updated_at' to all user data tables for sync conflict resolution.
CREATE TABLE public.profiles (id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE, full_name text, mobile_number text, is_approved boolean DEFAULT false, is_active boolean DEFAULT true, subscription_start_date date, subscription_end_date date, role text DEFAULT 'user', created_at timestamptz DEFAULT now(), updated_at timestamptz DEFAULT now());
CREATE TABLE public.assistants (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, name text NOT NULL, UNIQUE(user_id, name));
CREATE TABLE public.clients (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, name text NOT NULL, contact_info text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.cases (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, client_id text NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE, subject text NOT NULL, client_name text, opponent_name text, fee_agreement text, status text DEFAULT 'active', updated_at timestamptz DEFAULT now());
CREATE TABLE public.stages (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, case_id text NOT NULL REFERENCES public.cases(id) ON DELETE CASCADE, court text NOT NULL, case_number text, first_session_date timestamptz, decision_date timestamptz, decision_number text, decision_summary text, decision_notes text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.sessions (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, stage_id text NOT NULL REFERENCES public.stages(id) ON DELETE CASCADE, court text, case_number text, date timestamptz NOT NULL, client_name text, opponent_name text, postponement_reason text, next_postponement_reason text, is_postponed boolean DEFAULT false, next_session_date timestamptz, assignee text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.admin_tasks (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, task text NOT NULL, due_date timestamptz NOT NULL, completed boolean DEFAULT false, importance text DEFAULT 'normal', assignee text, location text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.appointments (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, title text NOT NULL, "time" text, date timestamptz NOT NULL, importance text, notified boolean, reminder_time_in_minutes integer, assignee text, completed boolean DEFAULT false, updated_at timestamptz DEFAULT now());
CREATE TABLE public.accounting_entries (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, type text NOT NULL, amount real NOT NULL, date timestamptz NOT NULL, description text, client_id text, case_id text, client_name text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.invoices (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, client_id text NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE, client_name text, case_id text REFERENCES public.cases(id) ON DELETE SET NULL, case_subject text, issue_date timestamptz NOT NULL, due_date timestamptz NOT NULL, tax_rate real DEFAULT 0, discount real DEFAULT 0, status text DEFAULT 'draft', notes text, updated_at timestamptz DEFAULT now());
CREATE TABLE public.invoice_items (id text NOT NULL PRIMARY KEY, user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, invoice_id text NOT NULL REFERENCES public.invoices(id) ON DELETE CASCADE, description text NOT NULL, amount real NOT NULL, updated_at timestamptz DEFAULT now());
CREATE TABLE public.site_finances (id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL, type text DEFAULT 'income' NOT NULL, payment_date date NOT NULL, amount real NOT NULL, description text, payment_method text, category text, updated_at timestamptz DEFAULT now());


-- 4. AUTOMATION: Trigger function for new user signup.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  -- This function robustly creates/updates a user's profile upon signup.
  -- It derives the local phone number (e.g., 09...) from the fake email (e.g., sy+9639...@email.com)
  -- by stripping the prefixes and suffix, making it independent of client-side metadata.
  INSERT INTO public.profiles (id, full_name, mobile_number, created_at)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    '0' || regexp_replace(new.email, '^sy\\\\+963|@email\\\\.com$', '', 'g'),
    new.created_at
  )
  ON CONFLICT (id) DO UPDATE SET
    full_name = EXCLUDED.full_name,
    mobile_number = EXCLUDED.mobile_number,
    created_at = EXCLUDED.created_at;
  
  -- Force-confirm the user's email to bypass email verification, as activation is manual.
  UPDATE auth.users SET email_confirmed_at = NOW() WHERE id = new.id;

  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, auth;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 5. SECURITY: RLS POLICIES
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assistants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cases ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.admin_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accounting_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.site_finances ENABLE ROW LEVEL SECURITY;

-- RLS Policies for the 'profiles' table.
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
CREATE POLICY "Admins have full access to all profiles." ON public.profiles FOR ALL USING (public.is_admin());

-- RLS Policies for the 'site_finances' table (Admin only).
CREATE POLICY "Enable ALL for admin" ON public.site_finances FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- RLS policies for all other user-specific tables.
DO $$
DECLARE
    table_name TEXT;
BEGIN
    FOREACH table_name IN ARRAY ARRAY[
        'assistants', 'clients', 'cases', 'stages', 'sessions', 
        'admin_tasks', 'appointments', 'accounting_entries', 
        'invoices', 'invoice_items'
    ]
    LOOP
        EXECUTE format('CREATE POLICY "Enable ALL for own data" ON public.%I FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);', table_name);
        EXECUTE format('CREATE POLICY "Enable ALL for admin" ON public.%I FOR ALL USING (is_admin()) WITH CHECK (is_admin());', table_name);
    END LOOP;
END$$;

-- 6. REALTIME: Enable real-time updates for all user data tables.
-- This is crucial for multi-user collaboration.
ALTER PUBLICATION supabase_realtime ADD TABLE
    public.profiles,
    public.assistants,
    public.clients,
    public.cases,
    public.stages,
    public.sessions,
    public.admin_tasks,
    public.appointments,
    public.accounting_entries,
    public.invoices,
    public.invoice_items,
    public.site_finances;

-- 7. AUTOMATION: Trigger function to auto-update 'updated_at' columns.
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now(); 
   RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply the trigger to all tables that have an 'updated_at' column.
DO $$
DECLARE
    table_name TEXT;
BEGIN
    FOREACH table_name IN ARRAY ARRAY[
        'profiles', 'clients', 'cases', 'stages', 'sessions', 
        'admin_tasks', 'appointments', 'accounting_entries', 
        'invoices', 'invoice_items', 'site_finances'
    ]
    LOOP
        EXECUTE format('
            CREATE TRIGGER handle_updated_at
            BEFORE UPDATE ON public.%I
            FOR EACH ROW
            EXECUTE PROCEDURE public.update_updated_at_column();
        ', table_name);
    END LOOP;
END$$;


-- 8. PERMISSIONS
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;

-- =================================================================
-- 9. إنشاء حساب المدير تلقائياً وتصحيحه
-- =================================================================
-- !! هام: عدّل البيانات التالية قبل تشغيل السكربت !!
DO $$
DECLARE
    admin_phone_local TEXT := '0987654321'; -- <-- غيّر رقم هاتف المدير هنا
    admin_phone_e164 TEXT := '+963' || RIGHT(admin_phone_local, 9);
    admin_email TEXT := 'sy' || admin_phone_e164 || '@email.com'; -- بريد وهمي بالصيغة الجديدة
    admin_password TEXT := 'changeme123'; -- <-- غيّر كلمة المرور هنا إلى كلمة مرور قوية
    admin_full_name TEXT := 'المدير العام';
    admin_user_id uuid;
BEGIN
    -- Check if the admin user's email exists in auth.users.
    SELECT id INTO admin_user_id FROM auth.users WHERE email = admin_email;

    -- If the user does not exist, create them in auth.users.
    IF admin_user_id IS NULL THEN
        INSERT INTO auth.users(id, email, encrypted_password, raw_user_meta_data, email_confirmed_at, aud, role)
        VALUES (
            gen_random_uuid(), -- Explicitly generate a UUID to avoid NOT NULL violation.
            admin_email,
            crypt(admin_password, gen_salt('bf')),
            jsonb_build_object('full_name', admin_full_name, 'mobile_number', admin_phone_local),
            now(),
            'authenticated',
            'authenticated'
        ) RETURNING id INTO admin_user_id;
    END IF;

    -- Upsert the profile for the admin user. This is robust:
    -- It creates the profile if the trigger failed or didn't run.
    -- It updates the profile to admin if it already exists.
    INSERT INTO public.profiles (id, full_name, mobile_number, role, is_approved, is_active, subscription_start_date, subscription_end_date)
    VALUES (
        admin_user_id,
        admin_full_name,
        admin_phone_local, -- Store the local phone number format
        'admin',
        true,
        true,
        '2024-01-01',
        '2999-12-31'
    )
    ON CONFLICT (id) DO UPDATE SET
        role = EXCLUDED.role,
        is_approved = EXCLUDED.is_approved,
        is_active = EXCLUDED.is_active,
        subscription_start_date = EXCLUDED.subscription_start_date,
        subscription_end_date = EXCLUDED.subscription_end_date,
        full_name = EXCLUDED.full_name,
        mobile_number = EXCLUDED.mobile_number;
END $$;
`;

const realtimeScript = `
-- =================================================================
-- سكربت تفعيل المزامنة الفورية (Real-time)
-- =================================================================
-- هذا السكربت يقوم بتفعيل خاصية المزامنة الفورية لجميع جداول البيانات.
-- شغله فقط إذا كانت ميزة التحديث الفوري بين المستخدمين لا تعمل.

-- 6. REALTIME: Enable real-time updates for all user data tables.
-- This is crucial for multi-user collaboration.
ALTER PUBLICATION supabase_realtime ADD TABLE
    public.profiles,
    public.assistants,
    public.clients,
    public.cases,
    public.stages,
    public.sessions,
    public.admin_tasks,
    public.appointments,
    public.accounting_entries,
    public.invoices,
    public.invoice_items,
    public.site_finances;
`;

const accountingScript = `
-- =================================================================
-- سكربت إنشاء الجداول المتعلقة بقسم المحاسبة
-- =================================================================
-- هذا السكربت يحتوي على الأوامر اللازمة لإنشاء جداول المحاسبة وسياسات الأمان الخاصة بها.
-- !! هام: هذا السكربت سيقوم بحذف وإعادة إنشاء جداول المحاسبة إذا كانت موجودة !!
-- ملاحظة: يفترض هذا السكربت أن جداول profiles, clients, cases, auth.users موجودة مسبقاً.

-- -1. CLEANUP: Drop accounting-related objects if they exist.
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT 'DROP POLICY IF EXISTS "' || policyname || '" ON public.' || tablename || ';' as statement FROM pg_policies WHERE schemaname = 'public' AND tablename IN ('site_finances', 'accounting_entries', 'invoices', 'invoice_items')) LOOP
        EXECUTE r.statement;
    END LOOP;
END$$;

DROP TABLE IF EXISTS public.invoice_items CASCADE;
DROP TABLE IF EXISTS public.invoices CASCADE;
DROP TABLE IF EXISTS public.accounting_entries CASCADE;
DROP TABLE IF EXISTS public.site_finances CASCADE;


-- 0. الدوال المساعدة (Dependencies)
-- هذه الدالة ضرورية لسياسات الأمان للتحقق من صلاحيات المدير
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS boolean AS $$
DECLARE
    user_role TEXT;
BEGIN
    SELECT role INTO user_role FROM public.profiles WHERE id = auth.uid();
    RETURN COALESCE(user_role, 'user') = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public, auth;


-- 1. إنشاء الجداول

-- جدول المحاسبة المالية للموقع (للإيرادات والمصروفات العامة)
CREATE TABLE public.site_finances (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
    type text DEFAULT 'income' NOT NULL,
    payment_date date NOT NULL,
    amount real NOT NULL,
    description text,
    payment_method text,
    category text,
    updated_at timestamptz DEFAULT now()
);

-- جدول القيود المحاسبية (المرتبطة بالموكلين والقضايا)
CREATE TABLE public.accounting_entries (
    id text NOT NULL PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    type text NOT NULL,
    amount real NOT NULL,
    date timestamptz NOT NULL,
    description text,
    client_id text,
    case_id text,
    client_name text,
    updated_at timestamptz DEFAULT now()
);

-- جدول الفواتير
CREATE TABLE public.invoices (
    id text NOT NULL PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    client_id text NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE,
    client_name text,
    case_id text REFERENCES public.cases(id) ON DELETE SET NULL,
    case_subject text,
    issue_date timestamptz NOT NULL,
    due_date timestamptz NOT NULL,
    tax_rate real DEFAULT 0,
    discount real DEFAULT 0,
    status text DEFAULT 'draft',
    notes text,
    updated_at timestamptz DEFAULT now()
);

-- جدول بنود الفواتير
CREATE TABLE public.invoice_items (
    id text NOT NULL PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    invoice_id text NOT NULL REFERENCES public.invoices(id) ON DELETE CASCADE,
    description text NOT NULL,
    amount real NOT NULL,
    updated_at timestamptz DEFAULT now()
);


-- 2. تفعيل سياسات أمان RLS (Row Level Security)
ALTER TABLE public.site_finances ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.accounting_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;


-- 3. إنشاء سياسات الأمان
-- فقط المدير يمكنه الوصول لجدول المحاسبة المالية للموقع
CREATE POLICY "Enable ALL for admin" ON public.site_finances FOR ALL
    USING (public.is_admin())
    WITH CHECK (public.is_admin());

-- المستخدمون يمكنهم الوصول لبياناتهم، والمدير يمكنه الوصول لكل البيانات
CREATE POLICY "Enable ALL for own data" ON public.accounting_entries FOR ALL
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable ALL for admin" ON public.accounting_entries FOR ALL
    USING (public.is_admin())
    WITH CHECK (public.is_admin());

CREATE POLICY "Enable ALL for own data" ON public.invoices FOR ALL
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable ALL for admin" ON public.invoices FOR ALL
    USING (public.is_admin())
    WITH CHECK (public.is_admin());

CREATE POLICY "Enable ALL for own data" ON public.invoice_items FOR ALL
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable ALL for admin" ON public.invoice_items FOR ALL
    USING (public.is_admin())
    WITH CHECK (public.is_admin());

-- 4. إنشاء Trigger لتحديث حقل 'updated_at' تلقائياً
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now(); 
   RETURN NEW;
END;
$$ language 'plpgsql';

-- تطبيق الـ Trigger على جداول المحاسبة
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.site_finances
    FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.accounting_entries
    FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.invoices
    FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();
CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.invoice_items
    FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();
`;

const repairScript = `
-- =================================================================
-- سكربت إصلاح أخطاء (مثل عمود 'completed' المفقود)
-- =================================================================
-- هذا السكربت يقوم بإضافة الأعمدة المفقودة إلى الجداول الموجودة دون حذف البيانات.
-- شغله إذا واجهت خطأ "Could not find the '...' column".

-- 1. Add 'completed' column to 'appointments' table
ALTER TABLE public.appointments
ADD COLUMN IF NOT EXISTS completed BOOLEAN DEFAULT false;

-- COMMENT: Add future repair statements here as needed.

-- Notify PostgREST to reload schema
-- This can help resolve caching issues immediately after altering the schema.
NOTIFY pgrst, 'reload schema';

-- Final check: Ensure permissions are correct on the new column.
-- The existing policies should cover it, but this is a safeguard.
GRANT SELECT, INSERT, UPDATE, DELETE ON public.appointments TO anon, authenticated;
`;

const ScriptDisplay: React.FC<{ script: string }> = ({ script }) => {
    const [copied, setCopied] = React.useState(false);

    const handleCopy = () => {
        navigator.clipboard.writeText(script.trim()).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };

    return (
        <div className="relative bg-gray-800 text-white p-4 rounded-md max-h-[40vh] overflow-y-auto">
            <pre className="text-sm whitespace-pre-wrap">
                <code>{script.trim()}</code>
            </pre>
            <button
                onClick={handleCopy}
                className="sticky bottom-2 right-2 flex items-center gap-2 px-3 py-1 bg-gray-600 text-white text-xs rounded-md hover:bg-gray-500"
            >
                {copied ? <ClipboardDocumentCheckIcon className="w-4 h-4 text-green-400"/> : <ClipboardDocumentIcon className="w-4 h-4"/>}
                {copied ? 'تم النسخ' : 'نسخ السكربت'}
            </button>
        </div>
    );
}

const ConfigurationModal: React.FC<{ onRetry: () => void }> = ({ onRetry }) => {
    const [view, setView] = React.useState<'setup' | 'realtime' | 'accounting' | 'repair'>('repair');

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4" dir="rtl">
            <div className="w-full max-w-4xl p-8 space-y-6 bg-white rounded-lg shadow-md">
                <div className="text-center">
                    <h1 className="text-3xl font-bold text-gray-800">إعداد قاعدة البيانات</h1>
                     <p className="mt-2 text-gray-600">
                        {view === 'setup' && "يبدو أن قاعدة البيانات غير مهيأة. يرجى اتباع الخطوات التالية لإعداد التطبيق."}
                        {view === 'realtime' && "استخدم هذا القسم لتفعيل المزامنة الفورية إذا توقفت عن العمل."}
                        {view === 'accounting' && "استخدم هذا القسم لإعادة إنشاء الجداول المتعلقة بالمحاسبة فقط."}
                        {view === 'repair' && "يبدو أن هناك خطأ في مزامنة البيانات. يرجى اتباع الخطوات أدناه لإصلاح قاعدة البيانات."}
                    </p>
                </div>

                <div className="border-b border-gray-200">
                    <nav className="-mb-px flex space-x-8" aria-label="Tabs">
                         <button
                            onClick={() => setView('repair')}
                            className={`${view === 'repair' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                        >
                            إصلاح الأخطاء
                        </button>
                        <button
                            onClick={() => setView('setup')}
                            className={`${view === 'setup' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                        >
                            الإعداد الكامل
                        </button>
                        <button
                            onClick={() => setView('accounting')}
                            className={`${view === 'accounting' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                        >
                            سكربت المحاسبة
                        </button>
                        <button
                            onClick={() => setView('realtime')}
                            className={`${view === 'realtime' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                        >
                            تفعيل المزامنة الفورية
                        </button>
                    </nav>
                </div>

                 {view === 'repair' && (
                    <div className="space-y-4 animate-fade-in">
                        <h2 className="text-xl font-semibold">إصلاح أخطاء شائعة</h2>
                        <p className="text-sm text-gray-600">
                            إذا كنت تواجه خطأً مثل <code className="bg-gray-200 p-1 rounded text-sm">Could not find the 'completed' column</code>، فهذا يعني أن مخطط قاعدة بياناتك قديم.
                            انسخ وشغّل السكربت التالي في <strong className="font-semibold">SQL Editor</strong> الخاص بـ Supabase لإصلاح المشكلة دون فقدان بياناتك الحالية.
                        </p>
                        <ScriptDisplay script={repairScript} />
                        <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            <li>من القائمة الجانبية في لوحة تحكم Supabase، اختر <strong className="font-semibold">SQL Editor</strong>.</li>
                            <li>اضغط على <strong className="font-semibold">+ New query</strong>.</li>
                            <li>الصق السكربت الذي نسخته في محرر الأكواد.</li>
                            <li>اضغط على زر <strong className="font-semibold text-green-600">RUN</strong> لتنفيذ السكربت.</li>
                            <li>بعد النجاح، عد إلى التطبيق واضغط على "إعادة المحاولة".</li>
                        </ol>
                    </div>
                )}

                {view === 'setup' && (
                    <div className="space-y-4 animate-fade-in">
                        <h2 className="text-xl font-semibold">الخطوة 1: اذهب إلى لوحة تحكم Supabase</h2>
                        <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            <li>اذهب إلى لوحة تحكم مشروعك في <a href="https://supabase.com/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">Supabase</a>.</li>
                        </ol>

                        <h2 className="text-xl font-semibold">الخطوة 2: نسخ وتشغيل السكربت الشامل</h2>
                        <p className="text-sm text-gray-600">
                            السكربت التالي سيقوم بإعداد الجداول والصلاحيات وتفعيل المزامنة الفورية تلقائياً.
                            <strong className="text-red-600"> هام: </strong> يجب تعديل رقم هاتف وكلمة مرور المدير داخل السكربت قبل تشغيله.
                        </p>
                        <ScriptDisplay script={unifiedScript} />
                         <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            <li>من القائمة الجانبية، اختر <strong className="font-semibold">SQL Editor</strong>.</li>
                            <li>اضغط على <strong className="font-semibold">+ New query</strong>.</li>
                            <li>الصق السكربت الذي نسخته في محرر الأكواد.</li>
                            <li>
                                <strong className="text-red-600">تأكد من تعديل رقم هاتف وكلمة مرور المدير</strong> في نهاية السكربت (القسم 9).
                            </li>
                            <li>اضغط على زر <strong className="font-semibold text-green-600">RUN</strong> لتنفيذ السكربت.</li>
                        </ol>

                        <div className="mt-4 p-4 bg-yellow-50 border-s-4 border-yellow-400">
                            <div className="flex">
                                <div className="flex-shrink-0">
                                    <ExclamationTriangleIcon className="h-5 w-5 text-yellow-500" aria-hidden="true" />
                                </div>
                                <div className="ms-3">
                                    <p className="text-sm text-yellow-800">
                                        <strong className="font-semibold">خطوة هامة بعد تشغيل السكربت:</strong> لإعلام Supabase بالتغييرات، اذهب إلى قسم <strong className="font-semibold">API Docs</strong> في لوحة التحكم، واضغط على زر <strong className="font-semibold">"Reload schema"</strong>. هذه الخطوة ضرورية لتجنب الأخطاء.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {view === 'accounting' && (
                    <div className="space-y-4 animate-fade-in">
                        <h2 className="text-xl font-semibold">سكربت قسم المحاسبة</h2>
                        <p className="text-sm text-gray-600">
                           هذا السكربت يحتوي فقط على الجداول والسياسات المتعلقة بقسم المحاسبة (المالية العامة، قيود الموكلين، الفواتير). استخدمه إذا كنت تحتاج فقط لإعادة إنشاء هذا الجزء من قاعدة البيانات.
                        </p>
                        <ScriptDisplay script={accountingScript} />
                         <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            <li>من القائمة الجانبية في لوحة تحكم Supabase، اختر <strong className="font-semibold">SQL Editor</strong>.</li>
                            <li>اضغط على <strong className="font-semibold">+ New query</strong>.</li>
                            <li>الصق السكربت الذي نسخته في محرر الأكواد.</li>
                            <li>اضغط على زر <strong className="font-semibold text-green-600">RUN</strong> لتنفيذ السكربت.</li>
                        </ol>
                    </div>
                )}
                
                {view === 'realtime' && (
                    <div className="space-y-4 animate-fade-in">
                        <h2 className="text-xl font-semibold">تفعيل المزامنة الفورية (Real-time)</h2>
                        <p className="text-sm text-gray-600">
                            إذا لم تعمل ميزة التحديث الفوري بين المستخدمين، قد تحتاج إلى تشغيل هذا السكربت يدوياً. هذا السكربت يقوم بتفعيل خاصية المزامنة الفورية لجميع جداول البيانات.
                        </p>
                        <ScriptDisplay script={realtimeScript} />
                         <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            <li>من القائمة الجانبية في لوحة تحكم Supabase، اختر <strong className="font-semibold">SQL Editor</strong>.</li>
                            <li>اضغط على <strong className="font-semibold">+ New query</strong>.</li>
                            <li>الصق السكربت الذي نسخته في محرر الأكواد.</li>
                            <li>اضغط على زر <strong className="font-semibold text-green-600">RUN</strong> لتنفيذ السكربت.</li>
                        </ol>
                    </div>
                )}

                <div className="text-center border-t pt-6">
                    <p className="text-gray-600 mb-4">بعد التأكد من نجاح تنفيذ الخطوات، اضغط على الزر أدناه لإعادة محاولة الاتصال.</p>
                    <button 
                        onClick={onRetry}
                        className="px-8 py-3 text-white bg-blue-600 rounded-lg hover:bg-blue-700 font-semibold"
                    >
                        إعادة المحاولة
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ConfigurationModal;